# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

env:
  #AWS_REGION : "eu-central-1" # Change to reflect your Region
  #TF_LOG : "debug"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 9
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Build with Next.js
        run: pnpm next build
      - name: Export with Next.js
        run: pnpm next export
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_AccessKey
          aws-region: ${{ vars.AWS_REGION }}
      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{vars.AWS_TERRAFORM_BUCKET}}
        run: terraform init -backend-config="bucket=${{ vars.AWS_BUCKET_NAME }}" -backend-config="key=${{ vars.DOMAIN }}.tfstate" -backend-config="region=${{ vars.AWS_REGION}}"
      - name: Terraform Plan
        id: plan
        run: terraform plan -var='domain=${{ vars.DOMAIN }}' -var='web_acl_arn=${{ vars.WEB_ACL_ARN }}' -var='region=${{vars.AWS_REGION}}' -out tf.plan

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false tf.plan

      - name: export terraform outputs
        id: tf
        run: echo "DISTRIBUTION_ID=$(terraform output -raw distribution_id)" >> $GITHUB_OUTPUT
    
      - name: List HTML files in the bucket
        run: |
          aws s3api list-objects --bucket ${{ vars.DOMAIN }} | jq -r '.Contents[].Key' | grep ".html$" > html_files.txt

      - name: Read HTML file list
        id: read_html_files
        run: |
          while read -r file; do
            echo "File: $file"
          done < html_files.txt
        
      - name: Duplicate HTML files without extension
        run: |
          while read -r file; do
            filename_no_ext=$(echo "$file" | sed 's/\.html$//')
            aws s3 cp "s3://${{ vars.DOMAIN }}/${file}" "s3://${{ vars.DOMAIN }}/${filename_no_ext}"
          done < html_files.txt

      - name: invalidate cloudfront
        id: invalidate
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.tf.outputs.DISTRIBUTION_ID}} --paths "/*"